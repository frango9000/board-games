name: Dump GitHub context

on:
  workflow_dispatch:

jobs:
  dump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"

      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

#      - name: Determine Hotfix Version
#        id: hotfix-version
#        run: |
#          npm version --json --no-git-tag-version patch
#          if [[ $CURRENT_BRANCH != 'master' ]]; then
#            npm version --json --no-git-tag-version patch
#          fi
#          version=$(node --print "require('./package.json').version")
#          echo "version=${version%-SNAPSHOT}" >> $GITHUB_OUTPUT
#
#      - name: Write Next Version
#        run: |
#          npm version --json --no-git-tag-version -f ${{ steps.hotfix-version.outputs.version }}-SNAPSHOT
#          cd apps/api
#          mvn versions:set -DgenerateBackupPoms -DnewVersion=${{ steps.hotfix-version.outputs.version }}-SNAPSHOT
#
#      - name: Commit and PR Merge Back
#        run: |
#          git config --global user.name 'Release Bot'
#          git config --global user.email 'frango9000@users.noreply.github.com'
#          git checkout -B hotfix/${{ steps.hotfix-version.outputs.version }}
#          git commit -am "Chore(project): Set Hotfix Snapshot Version ${{ steps.hotfix-version.outputs.version }}"
#          git push origin hotfix/${{ steps.hotfix-version.outputs.version }}
